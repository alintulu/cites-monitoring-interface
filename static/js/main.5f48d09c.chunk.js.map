{"version":3,"sources":["components/Header/index.js","components/ScreenHeader/index.js","components/Dashboard/index.js","container/DashboardContainer.js","components/Card/index.js","components/Gallery/index.js","components/PlantsScreen/index.js","container/PlantsScreenContainer.js","components/Fab/index.js","components/PlantScreen/index.js","container/PlantScreenContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","to","alt","src","key","exact","activeClassName","ScreenHeader","title","Dashboard","plants","length","DashboardContainer","connect","state","Card","path","name","image","EditableGallery","props","handleSearchChange","event","setState","search","target","value","toLowerCase","elements","this","filteredElements","filter","element","includes","type","onChange","placeholder","map","id","Component","withRouter","removePlant","history","plant","images","PlantsScreenContainer","PlantsScreen","Fab","icon","onClick","PlantScreen","href","download","alloffers","platform","offers","price","currency","undefined","p","offer","link","rel","PlantScreenContainer","ownProps","find","match","params","plantId","App","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initialState","store","createStore","combineReducers","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5f48d09c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink, Link } from 'react-router-dom';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <nav className=\"Header\">\r\n      <Link to=\"/\">\r\n        <img alt=\"Logo\" className=\"Header-logo\" src=\"favicon.ico\"/>\r\n      </Link>\r\n      <NavLink key=\"plants\" className=\"Header-link\" exact to=\"/plants\" activeClassName=\"active\">Plants</NavLink>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './ScreenHeader.css';\r\n\r\nconst ScreenHeader = ({title}) => {\r\n  return (\r\n    <header className=\"Screen-header\">\r\n      <h1 className=\"Screen-title\">{title}</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default ScreenHeader;\r\n","import React from 'react';\r\nimport ScreenHeader from '../ScreenHeader';\r\n\r\nconst Dashboard = ({plants}) => {\r\n  return (\r\n    <div>\r\n      <ScreenHeader title=\"Dashboard\"/>\r\n      <p>What's worse than one illegally trafficked plant? 5000 illegally trafficked plants!</p>\r\n      <p>Welcome to the CITES endangered species monitoring tool!</p>\r\n      <img\r\n      src=\"https://hips.hearstapps.com/esq.h-cdn.co/assets/15/08/1424204090-tumblr_m4g0ddotsx1qa1w9bo1_1280.jpg?resize=480:*\"\r\n      alt=\"Li'l Sebastian\"\r\n      />\r\n      <p>We currently have {plants.length} plants in our database.</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import { connect } from 'react-redux'\r\nimport Dashboard from '../components/Dashboard'\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    plants: state.plants\r\n  }\r\n}\r\n\r\nconst DashboardContainer = connect(\r\n  mapStateToProps,\r\n  null\r\n)(Dashboard)\r\n\r\nexport default DashboardContainer\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Card.css';\r\n\r\nconst Card = ({path, name, image}) => {\r\n  return (\r\n    <span>\r\n      <Link to={path}>\r\n        <div className=\"Card complete\">\r\n          <div className=\"Card-element\">\r\n            <img className=\"complete\" src={image} alt={name}/>\r\n            <div className=\"Card-description\">{name}</div>\r\n          </div>\r\n        </div>\r\n      </Link>\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from 'react';\r\nimport Card from '../Card';\r\nimport './Gallery.css';\r\n\r\nclass EditableGallery extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      search: \"\"\r\n    };\r\n  }\r\n\r\n  handleSearchChange = (event) => {\r\n    this.setState({search: event.target.value.toLowerCase()});\r\n  }\r\n\r\n  render() {\r\n    const {elements} = this.props;\r\n    const {search} = this.state;\r\n    const filteredElements = elements.filter(element => element.name.toLowerCase().includes(search));\r\n    return (\r\n      <div>\r\n        <input\r\n          className=\"search\"\r\n          type=\"text\"\r\n          value={search}\r\n          onChange={(event) => this.handleSearchChange(event)}\r\n          placeholder=\"Search...\"/>\r\n        <div className=\"Elements\">\r\n          {\r\n            filteredElements.map(element => {\r\n              return  <span key={element.id} className=\"Element\">\r\n                        <Card name={element.name} path={element.path} image={element.image}/>\r\n                      </span>\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditableGallery;\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router-dom'\r\nimport ScreenHeader from '../ScreenHeader';\r\nimport Gallery from '../Gallery';\r\n\r\nconst PlantsScreen = ({plants, removePlant, history}) => {\r\n  const elements = plants.map(plant => ({\r\n    id: plant.id,\r\n    name: plant.name,\r\n    path: \"/plant/\" + plant.id,\r\n    image: plant.images[0]\r\n  }));\r\n  return (\r\n    <div>\r\n      <ScreenHeader title=\"Plants\"/>\r\n      <Gallery elements={elements}/>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(PlantsScreen);\r\n","import { connect } from 'react-redux'\r\nimport PlantsScreen from '../components/PlantsScreen'\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    plants: state.plants\r\n  }\r\n}\r\n\r\nconst PlantsScreenContainer = connect(\r\n  mapStateToProps,\r\n  null\r\n)(PlantsScreen)\r\n\r\nexport default PlantsScreenContainer\r\n","import React from 'react';\r\nimport './Fab.css';\r\n\r\nconst Fab = ({icon, onClick}) => {\r\n  return (\r\n    <div><button className=\"Fab\" onClick={onClick}>{icon}</button></div>\r\n  );\r\n}\r\n\r\nexport default Fab;\r\n","import React from 'react';\r\nimport ScreenHeader from '../ScreenHeader';\r\nimport Fab from '../Fab';\r\nimport './PlantScreen.css';\r\n\r\nconst PlantScreen = ({plant}) => {\r\n  return (\r\n    <div>\r\n      <ScreenHeader title={plant.name}/>\r\n      <div className=\"Details-row\">\r\n        <div className=\"Details-column Details-left\">\r\n          <img className=\"Details-gallery\" src={plant.images[0]} alt={plant.name}/>\r\n          <a href=\"/plants.json\" download>\r\n            <Fab icon={<i className=\"fa fa-file-csv\"/>}/>\r\n          </a>\r\n        </div>\r\n        <div className=\"Details-column Details-right\">\r\n          <h3>ID</h3>\r\n          <p>\r\n            {plant.id}\r\n          </p>\r\n          <h3>Average price</h3>\r\n          <p>\r\n            {plant.alloffers[0].platform}: {plant.alloffers[0].offers[0].price} {plant.alloffers[0].offers[0].currency}\r\n          </p>\r\n          {plant.alloffers !== undefined && plant.alloffers.length > 0 &&\r\n            <div>\r\n            <h3>Latest offers</h3>\r\n            <p>\r\n              {plant.alloffers.map(p => {\r\n                return <div>\r\n                        <h4>{p.platform}</h4>\r\n                        {p.offers !== undefined && p.offers.length > 0 &&\r\n                          <div>\r\n                          <p>\r\n                            {p.offers.map(offer => {\r\n                              return <div>\r\n                                        <a href={offer.link} target=\"_blank\" rel=\"noopener noreferrer\">{offer.price} {offer.currency}</a>\r\n                                        <button className=\"flag\"><i className=\"fa fa-flag\"/></button>\r\n                                      </div>\r\n                            })}\r\n                          </p>\r\n                          </div>\r\n                        }\r\n                        </div>\r\n              })}\r\n            </p>\r\n            </div>\r\n          }\r\n          <span className=\"more\">Show more...</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PlantScreen;\r\n","import { connect } from 'react-redux'\r\nimport PlantScreen from '../components/PlantScreen'\r\n\r\nconst getPlant = (plants, props) => {\r\n  return plants.find(plant => plant.id === props.match.params.plantId);\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    plant: getPlant(state.plants, ownProps)\r\n  }\r\n}\r\n\r\nconst PlantScreenContainer = connect(\r\n  mapStateToProps,\r\n  null\r\n)(PlantScreen)\r\n\r\nexport default PlantScreenContainer\r\n","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport './App.css';\r\nimport Header from './components/Header';\r\nimport DashboardContainer from './container/DashboardContainer';\r\nimport PlantsScreenContainer from './container/PlantsScreenContainer';\r\nimport PlantScreenContainer from './container/PlantScreenContainer';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header/>\r\n        <div className=\"Content\">\r\n          <Switch>\r\n            <Route exact path=\"/\" component={DashboardContainer}/>\r\n            <Route exact path=\"/plants\" component={PlantsScreenContainer}/>\r\n            <Route exact path=\"/plant/:plantId\" component={PlantScreenContainer}/>\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router} from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { createStore } from 'redux'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { combineReducers } from 'redux'\r\n\r\nimport plants from './data/plants.json';\r\n\r\nconst initialState = {\r\n  plants: plants\r\n}\r\n\r\nconst store = createStore(combineReducers({}), initialState);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root'));\r\nserviceWorker.register();\r\n"],"sourceRoot":""}